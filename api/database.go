package main

import (
	"database/sql"
	"fmt"
	"log"
	"strconv"

	_ "github.com/lib/pq"
	"golang.org/x/crypto/bcrypt"
)

var db, db2, db3 *sql.DB

func connectToDB(host string, port string, name string, username string, password string, SSLMode string) *sql.DB {
	dsn := fmt.Sprintf("postgres://%v:%v@%v:%v/%v?sslmode=%v", username, password, host, port, name, SSLMode)
	database, err := sql.Open("postgres", dsn)

	if err != nil {
		log.Fatal(err)
	}

	if err := database.Ping(); err != nil {
		log.Fatal(err)
	}

	log.Printf("Connected to %v:%v/%v as %v", host, port, name, username)
	maxOpenConnections, err := strconv.ParseInt(getEnvVar("POSTGRESQL_MAX_OPEN_CONNECTIONS", "95"), 10, 0)

	if err != nil {
		log.Fatal(err)
	}

	database.SetMaxOpenConns(int(maxOpenConnections))
	return database
}

func dbMigrate() {
	migrations := []string{
		"CREATE TABLE IF NOT EXISTS public.users(id integer primary key generated by default as identity, password varchar(255) not null, first_name varchar(255) not null, last_name varchar(255) not null, birthdate varchar(10) not null, gender varchar(255), interests text, city varchar(255))",
		"CREATE TABLE IF NOT EXISTS public.friends(user_id integer REFERENCES public.users(id), friend_id integer REFERENCES public.users(id))",
		"CREATE TABLE IF NOT EXISTS public.posts (id integer primary key generated by default as identity, user_id integer REFERENCES public.users(id), text text not null, updated timestamptz DEFAULT now() NOT NULL);",
	}

	for _, migration := range migrations {
		if _, err := db.Exec(migration); err != nil {
			log.Fatal(err)
		}
	}
}

func dbAddUser(user User) (int64, error) {
	query := "INSERT INTO public.users(password, first_name, last_name, birthdate, gender, interests, city) VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING id"
	hash, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)

	if err != nil {
		log.Printf("dbAddUser.GenerateFromPassword: %v", err)
		return 0, err
	}

	var id int64
	if err := db.QueryRow(query, string(hash), user.FirstName, user.LastName, user.Birthdate, user.Gender, user.Interests, user.City).Scan(&id); err != nil {
		log.Printf("dbAddUser.QueryRow: %v", err)
		return 0, err
	}

	return id, nil
}

func dbGetUserByID(id int64) (User, error) {
	query := "SELECT id, password, first_name, last_name, birthdate, gender, interests, city FROM public.users WHERE id = $1"
	var user User

	if err := db2.QueryRow(query, id).Scan(&user.ID, &user.Password, &user.FirstName, &user.LastName, &user.Birthdate, &user.Gender, &user.Interests, &user.City); err != nil {
		if err != sql.ErrNoRows {
			log.Printf("dbGetUserByID.QueryRow: %v", err)
			return user, err
		}
	}

	return user, nil
}

func dbGetUsersByFistAndLastName(firstName, lastName string) ([]PrintableUser, error) {
	query := "SELECT id, first_name, last_name, birthdate, gender, interests, city FROM public.users WHERE first_name like $1 || '%' and last_name like $2 || '%'"
	var users []PrintableUser
	rows, err := db3.Query(query, firstName, lastName)

	if err != nil {
		log.Printf("dbGetUsersByFistAndLastName.Query: %v", err)
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var user PrintableUser

		if err := rows.Scan(&user.ID, &user.FirstName, &user.LastName, &user.Birthdate, &user.Gender, &user.Interests, &user.City); err != nil {
			log.Printf("dbGetUsersByFistAndLastName.Scan: %v", err)
			return nil, err
		}

		users = append(users, user)
	}

	if err := rows.Err(); err != nil {
		log.Printf("dbGetUsersByFistAndLastName.rows: %v", err)
		return nil, err
	}

	if len(users) == 0 {
		return nil, sql.ErrNoRows
	}

	return users, nil
}

func dbAddFriendByID(userID, friendID int64) error {
	query := "INSERT INTO public.friends(user_id, friend_id) VALUES($1, $2)"
	_, err := db.Exec(query, userID, friendID)

	if err != nil {
		log.Printf("dbAddFriendByID.Exec: %v", err)
	}

	return err
}

func dbDeleteFriendByID(userID, friendID int64) error {
	query := "DELETE FROM public.friends WHERE user_id = $1 AND friend_id = $2"
	_, err := db.Exec(query, userID, friendID)

	if err != nil {
		log.Printf("dbDeleteFriendByID.Exec: %v", err)
	}

	return err
}

func dbCreatePost(post Post, userID int64) (Post, error) {
	query := "INSERT INTO public.posts(text, user_id) VALUES($1, $2) RETURNING *"
	var createdPost Post

	if err := db.QueryRow(query, post.Text, userID).Scan(&createdPost.ID, &createdPost.UserID, &createdPost.Text, &createdPost.Updated); err != nil {
		log.Printf("dbCreatePost.QueryRow: %v", err)
		return createdPost, err
	}

	return createdPost, nil
}

func dbGetPostByID(postID int64) (Post, error) {
	query := "SELECT id, user_id, text, updated FROM public.posts WHERE id = $1"
	var post Post

	if err := db.QueryRow(query, postID).Scan(&post.ID, &post.UserID, &post.Text, &post.Updated); err != nil {
		if err != sql.ErrNoRows {
			log.Printf("dbGetPost.QueryRow: %v", err)
			return post, err
		}
	}

	return post, nil
}

func dbUpdatePost(post Post) (Post, error) {
	query := "UPDATE public.posts SET text = $1, updated = now() WHERE id = $2 RETURNING *"
	var updatedPost Post

	if err := db.QueryRow(query, post.Text, post.ID).Scan(&updatedPost.ID, &updatedPost.UserID, &updatedPost.Text, &updatedPost.Updated); err != nil {
		log.Printf("dbUpdatePost.QueryRow: %v", err)
		return post, err
	}

	return post, nil
}

func dbDeletePost(post Post) (Post, error) {
	query := "DELETE FROM public.posts WHERE id = $1 RETURNING *"
	var deletedPost Post

	if err := db.QueryRow(query, post.ID).Scan(&deletedPost.ID, &deletedPost.UserID, &deletedPost.Text, &deletedPost.Updated); err != nil {
		log.Printf("dbUpdatePost.QueryRow: %v", err)
		return post, err
	}

	return post, nil
}

func dbGetSubscribersCountByUserID(userID int64) (int64, error) {
	query := "SELECT count(1) FROM public.friends WHERE friend_id = $1"
	var count int64

	if err := db.QueryRow(query, userID).Scan(&count); err != nil {
		log.Printf("dbGetSubscribersCountByUserID.QueryRow: %v", err)
		return 0, err
	}

	return count, nil
}

func dbGetSubscribersByUserID(userID int64, offset, limit int64) ([]int64, error) {
	query := "SELECT user_id from public.friends WHERE friend_id = $1 OFFSET $2 LIMIT $3"
	var userIDs []int64
	rows, err := db.Query(query, userID, offset, limit)

	if err != nil {
		log.Printf("dbGetSubscribersByUserID.Query: %v", err)
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var userID int64

		if err := rows.Scan(&userID); err != nil {
			log.Printf("dbGetSubscribersByUserID.Scan: %v", err)
			return nil, err
		}

		userIDs = append(userIDs, userID)
	}

	if err := rows.Err(); err != nil {
		log.Printf("dbGetSubscribersByUserID.rows: %v", err)
		return nil, err
	}

	if len(userIDs) == 0 {
		return nil, sql.ErrNoRows
	}

	return userIDs, nil
}

func dbGetUsersWithFriends() ([]int64, error) {
	query := "SELECT DISTINCT user_id FROM public.friends"
	var userIDs []int64
	rows, err := db.Query(query)

	if err != nil {
		log.Printf("dbGetUsersWithFriends.Query: %v", err)
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var userID int64

		if err := rows.Scan(&userID); err != nil {
			log.Printf("dbGetUsersWithFriends.Scan: %v", err)
			return nil, err
		}

		userIDs = append(userIDs, userID)
	}

	if err := rows.Err(); err != nil {
		log.Printf("dbGetUsersWithFriends.rows: %v", err)
		return nil, err
	}

	if len(userIDs) == 0 {
		return nil, sql.ErrNoRows
	}

	return userIDs, nil
}

func dbGetPostsForFeedByUserID(userID int64) ([]Post, error) {
	query := "SELECT p.id, p.user_id, p.text, p.updated FROM public.friends f LEFT JOIN public.posts p ON f.friend_id = p.user_id WHERE f.user_id = $1 ORDER BY p.id DESC LIMIT $2"
	var posts []Post
	rows, err := db.Query(query, userID, feedSize)

	if err != nil {
		log.Printf("dbGetPostsForFeedByUserID.Query: %v", err)
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var post Post

		if err := rows.Scan(&post.ID, &post.UserID, &post.Text, &post.Updated); err != nil {
			log.Printf("dbGetPostsForFeedByUserID.Scan: %v", err)
			return nil, err
		}

		posts = append(posts, post)
	}

	if err := rows.Err(); err != nil {
		log.Printf("dbGetPostsForFeedByUserID.rows: %v", err)
		return nil, err
	}

	if len(posts) == 0 {
		return nil, sql.ErrNoRows
	}

	return posts, nil
}

func dbGetFriendsByUserID(userID int64) ([]int64, error) {
	query := "SELECT friend_id FROM public.friends WHERE user_id = $1"
	var friendIDs []int64
	rows, err := db.Query(query, userID)

	if err != nil {
		log.Printf("dbGetFriendsByUserID.Query: %v", err)
		return nil, err
	}

	defer rows.Close()

	for rows.Next() {
		var friendID int64

		if err := rows.Scan(&friendID); err != nil {
			log.Printf("dbGetFriendsByUserID.Scan: %v", err)
			return nil, err
		}

		friendIDs = append(friendIDs, friendID)
	}

	if err := rows.Err(); err != nil {
		log.Printf("dbGetFriendsByUserID.rows: %v", err)
		return nil, err
	}

	if len(friendIDs) == 0 {
		return nil, sql.ErrNoRows
	}

	return friendIDs, nil
}
